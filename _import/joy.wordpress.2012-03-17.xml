<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2012-03-17 08:33"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>j÷o÷y</title>
	<link>http://dragancvetinovic.wordpress.com</link>
	<description>Pulp Programming</description>
	<pubDate>Sat, 17 Mar 2012 08:33:05 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>http://dragancvetinovic.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>16929416</wp:author_id><wp:author_login>dragancvetinovic</wp:author_login><wp:author_email>dcvetinovic@gmail.com</wp:author_email><wp:author_display_name><![CDATA[dragancvetinovic]]></wp:author_display_name><wp:author_first_name><![CDATA[Dragan]]></wp:author_first_name><wp:author_last_name><![CDATA[Cvetinovic]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.com/</generator>
<cloud domain='dragancvetinovic.wordpress.com' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<image>
		<url>https://s-ssl.wordpress.com/i/buttonw-com.png</url>
		<title>j÷o÷y</title>
		<link>http://dragancvetinovic.wordpress.com</link>
	</image>
	<atom:link rel="search" type="application/opensearchdescription+xml" href="http://dragancvetinovic.wordpress.com/osd.xml" title="j÷o÷y" />
	<atom:link rel='hub' href='http://dragancvetinovic.wordpress.com/?pushpress=hub'/>

	<item>
		<title>Waiting for the Barbarians </title>
		<link>http://dragancvetinovic.wordpress.com/2010/10/02/waiting-for-the-barbarians/</link>
		<pubDate>Sat, 02 Oct 2010 10:58:37 +0000</pubDate>
		<dc:creator>dragancvetinovic</dc:creator>
		<guid isPermaLink="false">http://dragancvetinovic.wordpress.com/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[What are we waiting for, assembled in the forum?

The barbarians are to arrive today.

Why such inaction in the Senate?
Why do the Senators sit and pass no laws?

Because the barbarians are to arrive today.
What laws can the Senators pass any more?
When the barbarians come they will make the laws.

Why did our emperor wake up so early,
and sits at the greatest gate of the city,
on the throne, solemn, wearing the crown?

Because the barbarians are to arrive today.
And the emperor waits to receive
their chief.  Indeed he has prepared
to give him a scroll.  Therein he inscribed
many titles and names of honor.

Why have our two consuls and the praetors come out
today in their red, embroidered togas;
why do they wear amethyst-studded bracelets,
and rings with brilliant, glittering emeralds;
why are they carrying costly canes today,
wonderfully carved with silver and gold?

Because the barbarians are to arrive today,
and such things dazzle the barbarians.

Why don't the worthy orators come as always
to make their speeches, to have their say?

Because the barbarians are to arrive today;
and they get bored with eloquence and orations.

Why all of a sudden this unrest
and confusion. (How solemn the faces have become).
Why are the streets and squares clearing quickly,
and all return to their homes, so deep in thought?

Because night is here but the barbarians have not come.
And some people arrived from the borders,
and said that there are no longer any barbarians.

And now what shall become of us without any barbarians?
Those people were some kind of solution.

<em>Constantine P. Cavafy (1904)</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[What are we waiting for, assembled in the forum?

The barbarians are to arrive today.]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2010-10-02 10:58:37</wp:post_date>
		<wp:post_date_gmt>2010-10-02 10:58:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>waiting-for-the-barbarians</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="poetry"><![CDATA[Poetry]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[16929416]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286017117]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>tagazine-media</wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";s:1:"0";s:6:"author";s:8:"16929416";s:7:"blog_id";s:8:"16320163";s:9:"mod_stamp";s:19:"2010-10-02 11:02:56";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Memoizing Functions</title>
		<link>http://dragancvetinovic.wordpress.com/2010/10/02/memoizing-functions/</link>
		<pubDate>Sat, 02 Oct 2010 20:17:11 +0000</pubDate>
		<dc:creator>dragancvetinovic</dc:creator>
		<guid isPermaLink="false">http://dragancvetinovic.wordpress.com/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[I've been going  through some parts of <a href="http://oreilly.com/catalog/9780596516178"><em>The Ruby Programming Language</em></a> book recently, the best book about Ruby language I've read and
here are some interesting bits  about memoization that I found:

<em>Memoization is a functional programming term for caching the results of a function invocation. If a function always returns the same value when passed the same arguments, if there is reason to believe that the same arguments will be used repeatedly, and if the computation it performs is somewhat expensive, then memoization may be a useful optimization...
</em>

While I was reading about basic functional programming concepts, I picked up some FP terminology. For instance "<em>a function always returns the same value when passed the same arguments" </em> is called <em>referential transparency</em> in FP lingo, which is important concept since it assumes variables are non mutable. With this feature, chances of a bug occurring as a result of so called (mutability) <em>side effects </em> cease to exist.

The book offers Ruby solution for the memoization of the Proc and Method objects:
<pre>module Functional
  def memoize
    cache = {}
    lambda { |*args|
      unless cache.has_key?(args)
        cache[args] = self[*args]
      end
      cache[args]
    }
  end
end
module Proc; include Functional; end
module Method; include Functional; end</pre>
I've removed comments for the sake of readability. Here is basically what function does: if there is no results for the particular <code>args</code>
a procedure/method will be executed and the results cached and returned, otherwise already cached results will be returned.
What I find unusual here is that the entire array of arguments is the hash key.

I thought it would be interesting to excercise memoizing technique and  decided to try it out on Fibonnaci sequences:

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...

Generally, this sequence can be defined in the form of the function F(n) such that:

F(n) = 0, if n = 0
F(n) = 1, if n = 1
F(n) = F(n-1) + F(n+2), otherwise.

In Ruby this definition can be translated in straightforward, but,  from the performance point of view,  terrible lambda function.
<pre># Fibonnaci numbers computed with
# a tree recursive algorithm without memoization.
fib_wo_mem = lambda do |n|
  return 0 if n == 0
  return 1 if n == 1
  fib_wo_mem(n - 1) + fib_wo_mem(n - 2)
end</pre>
We can see why this function is so terrible. It will do a lot of redundant computation. Only fib_wo_mem(1) and fib_wo_mem(0) will
be computed F(n+1) times, and if we know that F(n) grows exponentially WRT n, than we get an idea of how
bad this can be. Even with such a bad choise our friend memoization might save us to some extent.

First we need to slightly modify the above fib_wo_mem function:
<pre>  fib_with_mem = lambda do |n|
    return 0 if n == 0
    return 1 if n == 1
    fib_with_mem(n - 1) + fib_with_mem(n - 2)
  end.memoize</pre>
Let's compare these two:
<pre> Benchmark.bmbm{ |x|
   x.report('fib_with_mem'){ fib_with_mem[20] }
   x.report('fib_wo_mem'){ fib_wo_mem[20] }
 }

Rehearsal -----------------------------------------------
fib_with_mem   0.000000   0.000000   0.000000 (  0.000175)
fib_wo_mem     0.400000   0.000000   0.400000 (  0.413050)
--------------------------------------- total: 0.400000sec
                   user     system       total        real
fib_with_mem   0.000000   0.000000   0.000000 (  0.000019)
fib_wo_mem     0.410000   0.010000   0.420000 (  0.410216)</pre>
Because everything is already cached after the first execution "fib_with_mem" is about 10 times faster the second time.
So it is fair  to  take into account just Rehearsal times.  Even just for the first execution the difference is striking.
Fibonnaci function with memoization is more than 2,000 times faster than its w/o memoization counterpart.
(I used here number 20 because with anything bigger <code>fib_wo_mem</code> function gets unbearably slow. You can try it.)

After this we may be interested to see  how this recursive, not_appropriate_solution,
compares with a more efficient implementation of fibonnaci function.

More efficient solution may be to use pair of integers a and b with iterative, parallel assignments: a = a + b, b = a.
After n such iterations a and b should be equal to F(n+1) and F(n) respectively. In order to come to this solution
we only need to apply basic rule of the sequence F(n) = F(n-1) + F(n-2) in n iterations. Each iteration will take two last numbers
from the sequence as an input, and produce next two as an output which than will serve as an input for next iteration...

Here is how it can be implemented:
<pre>#linear iteration fibonaci
lin_fib_iter = lambda do |a, b, n|
  return b if n == 0
  lin_fib_iter[a+b, a, n-1]
end
#<em> While lin_fib_iter is a recursive procedure, computation itself is iterative.</em>
</pre>
Let's crunch some numbers and do benchmarking:
<pre>Benchmark.bmbm{ |x|
  x.report('fib_with_mem'){ fib_with_mem[1000] }
  x.report('lin_fib_iter'){ lin_fib_iter[1, 0, 1000] }
}

Rehearsal -------------------------------------------
fib_with_mem   0.020000   0.000000   0.020000 ( 0.017360)
lin_fib_iter   0.000000   0.000000   0.000000 ( 0.001376)
---------------------------------- total: 0.020000sec
                   user     system      total        real
fib_with_mem   0.000000   0.000000   0.000000 ( 0.000041)
lin_fib        0.000000   0.000000   0.000000 ( 0.001345)</pre>
Even for a small number such as 1000, iterative solution is more than 10 times faster (for the first execution). This is expected, since the iterative solution has linear, while the first solution has exponential growth WRT n. Although the tree-recursive-memoized version is about 30 times faster the second time (everything is already cached) it is not right approach for the given problem (not just because "stack level too deep" error begins to occur already at n = 1500 ). This does not  imply that tree recursive processes are useless. On contrary they can be natural solutions for some classes of problems.

<em>Note: Implementations of the Fibonnaci functions are translated from their orginal Scheme versions which can be found in
the one of the CS's classics:  <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">Structure and Interpretation of Computer Programs</a>. </em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2010-10-02 22:17:11</wp:post_date>
		<wp:post_date_gmt>2010-10-02 20:17:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>memoizing-functions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1286050631]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[16929416]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1286050632]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Editing with sed </title>
		<link>http://dragancvetinovic.wordpress.com/2011/09/17/sed-tip/</link>
		<pubDate>Sat, 17 Sep 2011 16:16:47 +0000</pubDate>
		<dc:creator>dragancvetinovic</dc:creator>
		<guid isPermaLink="false">http://dragancvetinovic.wordpress.com/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[I had to deal with some broken csv files today. The Windows's end of line characters ('^M') were all over the place and some csv rows were broken up into several text lines. They looked something like the following text (one csv row is broken into two text lines with each line ending with '^M'):

<blockquote>29.12.2005;1450,00;5,07;6.036;1399.00;1399.00^M
;1450.00;-;-;KT^M
28.12.2005;1380,00;-1,43;4.000;1380.00;1380.00^M
;1380.00;-;-;KT^M
27.12.2005;1400,00;-0,64;166;1384.00;1384.00^M
;1400.00;-;-;KT^M</blockquote>
 
So, here is the sed solution I came up with after quite a struggle. 

<code>sed  -e :a -e 's/^M//;' -e '/[0-9]$/N; s/\n//; ta' input_file.csv  &gt;output_file.csv</code>
 
Here is what it does:
The first expression ':a' creates a named label "a". The second expression substitutes occurrences of '^M' with an empty string. The third expression looks to see if the current line ends with a digit. If it does, it joins it with the line following it using the "N" command. Then the newline between joined lines is erased with "s/\n//" command. If the substitution was successful further execution is branched to the beginning of expression and do the same again, in case that we might have another digit at the end. If the substitution was not successful, the line did not end with a digit and we print it out. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2011-09-17 18:16:47</wp:post_date>
		<wp:post_date_gmt>2011-09-17 16:16:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sed-tip</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="unix"><![CDATA[Unix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[16929416]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1316276207]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1316276209]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sudoku solver in Ruby</title>
		<link>http://dragancvetinovic.wordpress.com/2011/09/18/sudoku-solver-in-ruby/</link>
		<pubDate>Sun, 18 Sep 2011 21:37:59 +0000</pubDate>
		<dc:creator>dragancvetinovic</dc:creator>
		<guid isPermaLink="false">http://dragancvetinovic.wordpress.com/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[Being inspired by pure elegance and mastery of <a href="http://norvig.com/sudoku.html">Peter Norvig's sudoku solver</a> which was implemented in Python, I wanted to see what it would look like in Ruby. I also wanted to check if my understanding of the original ideas, data structures and implementation details is good enough to implement them in another language. After I had finished the first Ruby version (you could see it bellow) I found, not surprisingly at all, that the original program is more elegant and easy to read and that it better communicates essential ideas (I don't think this is only because Python has list comprehensions ;)).
<pre>def cross(arr,brr)
  arr.map{ |a| brr.map{ |b| a+b }}.flatten
end

ROWS, DIGITS = ('A'..'I').to_a, ('1'..'9').to_a
COLS = DIGITS
GSIZE = ROWS.size * COLS.size
SQUARES = cross(ROWS, COLS)
UNITSARR = COLS.map{ |c| cross(ROWS, [c]) } +
           ROWS.map{ |r| cross([r], COLS) } +
           ['A'..'C','D'..'F','G'..'I'].inject([]) do |arr,rs|
              ['1'..'3','4'..'6','7'..'9'].map{ |cs| arr &lt;&lt; cross(rs, cs) }
              arr
           end
UNITS = SQUARES.inject({}){ |h,s| h[s] = UNITSARR.select{ |u| u.include? s}.flatten; h}
PEERS = SQUARES.inject({}){ |h,s| h[s] = UNITS[s] - [s]; h}
</pre>
Parse the inital sudoku problem:
<pre>
def parse_grid
   values = Hash[SQUARES.zip([DIGITS] * GSIZE)]
   grid_values = lambda do |grid|
      Hash[*SQUARES.zip(grid.gsub(/[^0-9.]/, '').chars.to_a).flatten]
   end
   lambda do |grid|
      grid_values[grid].any? do |s,d|
         DIGITS.include?(d) and not assign(values, s, d)
      end ? false : values
   end
end
</pre>
Assign the values:
<pre>
def assign(values, s, d)
   ([values[s]].flatten - [d]).all? do |d2|
      eliminate(values, s, d2)
   end ? values : false
end
</pre>

By eliminating non acceptable combinations (recursive method):
<pre>
def eliminate(values, s, d)
   return values unless [values[s]].flatten.include?(d)
   values[s] = [values[s]].flatten - [d]

   if values[s].empty?
      return false
   elsif values[s].length == 1
      return false unless PEERS[s].all? do |p|
         eliminate(values, p, values[s][0])
      end
   end

   dplaces = UNITS[s].select{ |s| values[s].include?(d) }
   if dplaces.size == 0
      return false
   end
   if dplaces.size == 1
      return false unless assign(values, dplaces[0], d)
   end

   values
end
</pre>
Search for solution:
<pre>
def search(values)
   return false unless values
   return values unless values.any?{ |k,v| v.size != 1 }
   s, n = values.find do |k,v|
      v.size == values.select{ |k,v| v.size &gt; 1 }.map{ |k,v| v.size }.min
   end
   return values[s].map do |d|
      search(assign(values.dup, s, d))
   end.flatten.find{ |v| v }
end
def solve(grid); search(parse_grid[grid]); end
</pre>

And display it:

<pre>
def display(values)
   width = 1 + SQUARES.map{ |s| values[s].size }.flatten.max
   line = [[ '-' * (width * 3)] * 3].join '+'
   ROWS.each{ |r|
      puts COLS.inject(''){ |s,c|
      s &lt;&lt; values[r+c].join('').center(width)
      ['3', '6'].include?(c) ? s &lt;&lt; '|' : s
   }
   puts line if ['C', 'F'].include?(r)
}
end</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2011-09-18 23:37:59</wp:post_date>
		<wp:post_date_gmt>2011-09-18 21:37:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sudoku-solver-in-ruby</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[16929416]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1316381879]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1316381883]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby quine blog (we all came from Turing machine)</title>
		<link>http://dragancvetinovic.wordpress.com/2011/11/12/ruby-quine-blog/</link>
		<pubDate>Sat, 12 Nov 2011 13:51:12 +0000</pubDate>
		<dc:creator>dragancvetinovic</dc:creator>
		<guid isPermaLink="false">http://dragancvetinovic.wordpress.com/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[<code>s="Ruby quine blog (we all came from Turing machine)%cs=%c%s%c;printf s,10,34,s,34,10%c";printf s,10,34,s,34,10</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2011-11-12 14:51:12</wp:post_date>
		<wp:post_date_gmt>2011-11-12 13:51:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ruby-quine-blog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[16929416]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1321105874]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1321105875]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Slvc]]></wp:comment_author>
			<wp:comment_author_email>coolishka@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.180.95.191</wp:comment_author_IP>
			<wp:comment_date>2011-11-12 14:52:05</wp:comment_date>
			<wp:comment_date_gmt>2011-11-12 13:52:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[lajk :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1321105926.603";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1321108106]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1321108106.2134";s:7:"message";s:55:"dragancvetinovic changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:16:"dragancvetinovic";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Suspend and Hibernate in Arch Linux</title>
		<link>http://dragancvetinovic.wordpress.com/2012/02/19/suspend-and-hibernate-in-arch-linux/</link>
		<pubDate>Sun, 19 Feb 2012 20:19:53 +0000</pubDate>
		<dc:creator>dragancvetinovic</dc:creator>
		<guid isPermaLink="false">http://dragancvetinovic.wordpress.com/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[In order to suspend your session in Arch Linux (to RAM or disk) you should try to follow the steps from bellow:

1. First install pm-utils tools with the pacman. No surprises here, just type:
<blockquote>
<pre>sudo pacman -S pm-utils</pre>
</blockquote>
and heavy lifting will be done with the awesome pacman program. In the case that 'vbetool' and 'acpi' packages are not installed, you will need to install them too with similar incantations.

2. Suspend to RAM should be enabled imidiatelly. You can check that with the following command:
<blockquote>
<pre>sudo pm-suspend</pre>
</blockquote>
After this, current session should be saved to RAM and machine put on standby mode.

3.Hibernation (suspend to disk) needs additional configuration. Receipt that worked for me is listed bellow:

3.1. Add to GRUB's config file 'resume' option ('resume=/path/to/swap/drive') by editing the kernel line in the next paragraph:
<blockquote>
<pre>title Arch Linux
root (hd0,2)
kernel /vmlinuz-linux root=/dev/sda4 ro
initrd /initramfs-linux.img</pre>
</blockquote>
as follows:
<blockquote>
<pre>kernel /vmlinuz-linux root=/dev/sda4 resume=/dev/sda5 ro</pre>
</blockquote>
<em>Note:
GRUB config file on my machine is '/boot/grub/menu.lst', but if you have GRUB2 it should be '/boot/grub/grub.cfg', also the configuration is somewhat different, look for details <a title="here" href="https://wiki.archlinux.org/index.php/Pm-utils#Hibernation_.28suspend2disk.29">here</a>).
The swap partition on my machine is '/dev/sda5', of course you should change this with the path of your swap partition.</em>

3.2. Additionally, resume hook should be added to 'etc/mkinitcpio.conf' as follows:
<blockquote>
<pre>HOOKS="base udev autodetect ide scsi sata lvm2 resume filesystems"</pre>
</blockquote>
Ordering matters here, so it is important to place resume after ide, scsi, sata and lvm2 and before filesystems. After this, recreate ramdisk environment with:
<blockquote>
<pre>mkinitcpio -p linux</pre>
</blockquote>
If everything went well set user permissions for pm-utils in '/etc/sudoers' config file as follows:
<blockquote>
<pre> username, hostname=NOPASSWD: /usr/sbin/pm-hibernate, /usr/sbin/pm-suspend</pre>
</blockquote>
where username and hostname placeholders shoud be actual values. This way you authorize your user to execute pm-hibernate and pm-suspend w/o need to login as superuser each time.

3.4. Add aliases to config file of your preferd shell and you are good to go:
<blockquote>
<pre>alias hibernate="sudo pm-hibernate"
alias suspend="sudo pm-suspend"</pre>
</blockquote>
Happy hacking!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2012-02-19 21:19:53</wp:post_date>
		<wp:post_date_gmt>2012-02-19 20:19:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>suspend-and-hibernate-in-arch-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[16929416]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1329682794]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>email_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1329682794]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Slvc]]></wp:comment_author>
			<wp:comment_author_email>coolishka@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>95.180.90.255</wp:comment_author_IP>
			<wp:comment_date>2012-02-19 22:44:25</wp:comment_date>
			<wp:comment_date_gmt>2012-02-19 21:44:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Like :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1329687868]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329687868.7598";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
