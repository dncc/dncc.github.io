---
layout: post
title: Editing with sed
tags:
- Unix
status: publish
type: post
published: true
meta:
  _edit_last: '16929416'
  jabber_published: '1316276207'
  email_notification: '1316276209'
---

I had to deal with some broken csv files today. The Windows's end of line characters ('^M') were all over the place and some csv rows were broken up into several text lines. They looked something like the following text (one csv row is broken into two text lines with each line ending with '^M'):

{% highlight bash %}
29.12.2005;1450,00;5,07;6.036;1399.00;1399.00^M
;1450.00;-;-;KT^M
28.12.2005;1380,00;-1,43;4.000;1380.00;1380.00^M
;1380.00;-;-;KT^M
27.12.2005;1400,00;-0,64;166;1384.00;1384.00^M
;1400.00;-;-;KT^M
{% endhighlight %}
 
So, here is the sed solution I came up with after quite a struggle. 

{% highlight bash %}
sed  -e :a -e 's/^M//;' -e '/[0-9]$/N; s/\n//; ta' \
input_file.csv > output_file.csv
{% endhighlight %}

Here is what it does:
The first expression ':a' creates a named label "a". The second expression substitutes occurrences of '^M' with an empty string. The third expression looks to see if the current line ends with a digit. If it does, it joins it with the line following it using the "N" command. Then the newline between joined lines is erased with "s/\n//" command. If the substitution was successful further execution is branched to the beginning of expression and do the same again, in case that we might have another digit at the end. If the substitution was not successful, the line did not end with a digit and we print it out.
